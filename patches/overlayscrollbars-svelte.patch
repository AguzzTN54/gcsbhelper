diff --git a/OverlayScrollbarsComponent.svelte b/OverlayScrollbarsComponent.svelte
index 9915f76fa80c2e0d6854836556be1d1ded69ceb1..283926923fc9f1d7862c833d615f2549e31d83bd 100644
--- a/OverlayScrollbarsComponent.svelte
+++ b/OverlayScrollbarsComponent.svelte
@@ -1,104 +1,143 @@
-<script>import { afterUpdate, createEventDispatcher, onDestroy } from 'svelte';
-import { OverlayScrollbars } from 'overlayscrollbars';
-import { createDefer } from './createDefer';
-export let element = 'div';
-export let options = undefined;
-export let events = undefined;
-export let defer = undefined;
-let instance = null;
-let elementRef = null;
-let slotRef = null;
-let combinedEvents = undefined;
-let prevElement;
-const [requestDefer, cancelDefer] = createDefer();
-const initialize = () => {
-    const init = () => {
-        const target = elementRef;
-        if (!target) {
-            return;
-        }
-        instance?.destroy();
-        instance = OverlayScrollbars(element === 'body'
-            ? {
-                target,
-                cancel: {
-                    body: null,
-                },
-            }
-            : {
-                target,
-                elements: {
-                    viewport: slotRef,
-                    content: slotRef,
-                },
-            }, options || {}, combinedEvents || {});
-    };
-    if (defer) {
-        requestDefer(init, defer);
-    }
-    else {
-        init();
-    }
-    prevElement = element;
-};
-const dispatchEvents = {
-    initialized: 'osInitialized',
-    updated: 'osUpdated',
-    destroyed: 'osDestroyed',
-    scroll: 'osScroll',
-};
-const dispatchEvent = createEventDispatcher();
-export const osInstance = () => instance;
-export const getElement = () => elementRef;
-onDestroy(() => {
-    cancelDefer();
-    instance?.destroy();
-});
-afterUpdate(() => {
-    if (prevElement !== element) {
-        initialize();
-    }
-});
-$: {
-    const currEvents = events || {};
-    combinedEvents = Object.keys(dispatchEvents).reduce((obj, name) => {
-        const eventListener = currEvents[name];
-        obj[name] = [
-            (...args) => dispatchEvent(
-            // @ts-ignore
-            dispatchEvents[name], 
-            // @ts-ignore
-            args),
-            ...(Array.isArray(eventListener) ? eventListener : [eventListener]).filter(Boolean),
-        ];
-        return obj;
-    }, {});
-}
-$: {
-    if (OverlayScrollbars.valid(instance)) {
-        instance.options(options || {}, true);
-    }
-}
-$: {
-    if (OverlayScrollbars.valid(instance)) {
-        instance.on(
-        /* c8 ignore next */
-        combinedEvents || {}, true);
-    }
-}
+<script lang="ts">
+	import { onDestroy, setContext } from 'svelte';
+	import { OverlayScrollbars } from 'overlayscrollbars';
+	import { createDefer } from './createDefer';
+
+	const {
+		element = 'div',
+		options,
+		events = {},
+		defer,
+		main = false,
+		class: klass,
+		...properties
+	} = $props();
+
+	// OverlayScrollBar
+	let instance = $state() as OverlayScrollbars;
+	let elementRef = $state(null);
+	let slotRef = $state() as HTMLElement;
+	let combinedEvents = $state();
+	let prevElement = $state();
+
+	const [requestDefer, cancelDefer] = createDefer();
+
+	const initialize = () => {
+		const init = () => {
+			const target = elementRef;
+
+			if (!target) {
+				return;
+			}
+
+			instance?.destroy();
+			instance = OverlayScrollbars(
+				element === 'body'
+					? {
+							target,
+							cancel: {
+								body: null
+							}
+						}
+					: {
+							target,
+							elements: {
+								viewport: slotRef,
+								content: slotRef
+							}
+						},
+				options || {},
+				combinedEvents || {}
+			);
+		};
+
+		if (defer) {
+			requestDefer(init, defer);
+		} else {
+			init();
+		}
+
+		prevElement = element;
+	};
+
+	const dispatchEvents = {
+		oninitialized: 'osInitialized',
+		onupdated: 'osUpdated',
+		ondestroyed: 'osDestroyed',
+		onscroll: 'osScroll'
+	};
+
+	// const dispatchEvent = createEventDispatcher<{
+	// 	osInitialized: EventListenerArgs['initialized'];
+	// 	osUpdated: EventListenerArgs['updated'];
+	// 	osDestroyed: EventListenerArgs['destroyed'];
+	// 	osScroll: EventListenerArgs['scroll'];
+	// }>();
+
+	export const osInstance = () => instance;
+	export const getElement = () => elementRef;
+
+	const destroyScrollbar = () => {
+		cancelDefer();
+		instance?.destroy();
+	};
+	onDestroy(destroyScrollbar);
+
+	$effect(() => {
+		if (prevElement !== element) {
+			initialize();
+		}
+	});
+
+	const currEvents = $derived(events || {});
+	$effect(() => {
+		combinedEvents = Object.keys(dispatchEvents).reduce(
+			(obj: { [key: string]: unknown[] }, name) => {
+				const eventName = name.replace('on', '');
+				const eventListener = currEvents[eventName];
+				obj[eventName] = [
+					(...args: unknown[]) => (properties[name] || (() => 0))(args),
+					...(Array.isArray(eventListener) ? eventListener : [eventListener]).filter(Boolean)
+				];
+				return obj;
+			},
+			{}
+		);
+	});
+
+	$effect(() => {
+		if (OverlayScrollbars.valid(instance)) {
+			instance.options(options || {}, true);
+		}
+	});
+
+	$effect(() => {
+		if (OverlayScrollbars.valid(instance)) {
+			instance.on(combinedEvents || {}, true);
+		}
+	});
 </script>
 
 <svelte:element
-  this={element}
-  data-overlayscrollbars-initialize=""
-  bind:this={elementRef}
-  {...$$restProps}
+	this={element}
+	data-overlayscrollbars-initialize=""
+	bind:this={elementRef}
+	{...properties}
 >
-  {#if element === 'body'}
-    <slot />
-  {:else}
-    <div data-overlayscrollbars-contents="" bind:this={slotRef}>
-      <slot />
-    </div>
-  {/if}
+	{#if element === 'body'}
+		<slot/>
+	{:else}
+		<div data-overlayscrollbars-contents="" class={klass} bind:this={slotRef}>
+			<slot/>
+		</div>
+	{/if}
 </svelte:element>
+
+<style>
+	:global {
+		.mobile .os-theme-dark,
+		.mobile .os-theme-light {
+			--os-size: 0.5rem;
+		}
+	}
+</style>
